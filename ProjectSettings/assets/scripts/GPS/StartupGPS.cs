using UnityEngine;
using System.Collections;

public class StartupGPS : MonoBehaviour {

	public GameObject wall;
	public GameObject trap;

	protected const float WALL_DISTANCE = 0.25F;
	protected const float HALF_WALL_DISTANCE = 0.5F * WALL_DISTANCE;
	protected const float QUARTER_WALL_DISTANCE = 0.5F * HALF_WALL_DISTANCE;

	private int[,] horizontalWalls = new int[,]
	{
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0},
		{0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1},
		{0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1},
		{0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1},
		{0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1},
		{1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0},
		{0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0},
		{1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0},
		{0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1},
		{0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0},
		{0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0},
		{0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1},
		{0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1},
		{0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0},
		{1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0},
		{0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0},
		{0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0},
		{0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1},
		{0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0}
	};

	private int[,] verticalWalls = new int[,]
	{
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1},
		{1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1},
		{1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1},
		{1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1},
		{1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1},
		{1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1},
		{1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1},
		{1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1},
		{1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1},
		{1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1},
		{1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1},
		{1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1},
		{1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1},
		{1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1},
		{1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1},
		{1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1},
		{1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1},
		{1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1},
		{1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1},
		{1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1},
	};

	private int[,] traps = new int[,]
	{
		{3, 5},
		{7, 6},
		{13, 7},
		{4, 11},
		{8, 7},
		{14, 1},
		{13, 14},
		{23, 13},
		{17, 5},
		{20, 21},
		{35, 24},
		{27, 31},
		{19, 23},
		{13, 17},
		{37, 4},
		{5, 23},
		{16, 39},
		{14, 29},
		{32, 24},
		{26, 29},
		{4, 33},
		{9, 24},
		{6, 33},
		{24, 30},
		{27, 35},
		{31, 37},
		{25, 18},
		{33, 31},
		{35, 29},
		{17, 34},
		{31, 38},
		{32, 26},
		{16, 34},
		{29, 16},
		{36, 19},
		{24, 38},
		{26, 5},
		{23, 33},
		{27, 37},
		{34, 39},
		{36, 36},
		{27, 36},
		{25, 34},
		{25, 38},
		{23, 30},
	};

	// Use this for initialization
	void Start() {
		// walls
		for (int i = 0; i < horizontalWalls.GetLength(0); i++) {
			for (int j = 0; j < horizontalWalls.GetLength(1); j++) {
				if (horizontalWalls[i, j] == 1) {
					Instantiate(wall, new Vector2((j * WALL_DISTANCE) + HALF_WALL_DISTANCE, -(i * WALL_DISTANCE)), Quaternion.identity);
				}
			}
		}
		for (int i = 0; i < verticalWalls.GetLength(0); i++) {
			for (int j = 0; j < verticalWalls.GetLength(1); j++) {
				if (verticalWalls[i, j] == 1) {
					Instantiate(wall, new Vector2(j * WALL_DISTANCE, -((i * WALL_DISTANCE) + HALF_WALL_DISTANCE)), Quaternion.Euler(0, 0, 90));
				}
			}
		}

		// traps
		for (int i = 0; i < traps.GetLength(0); i++) {
			int trapRow = traps[i, 0];
			int trapCol = traps[i, 1];
			GameObject newWall = (GameObject)Instantiate(trap, new Vector2(trapRow * HALF_WALL_DISTANCE + QUARTER_WALL_DISTANCE,
				                                                           -(trapCol * HALF_WALL_DISTANCE) - QUARTER_WALL_DISTANCE), Quaternion.identity);
			newWall.GetComponent<TrapGPS>().trapStateOn = ((trapRow + trapCol) % 2) + 1;
		}
	}
	
	// Update is called once per frame
	void Update() {
	
	}
}
